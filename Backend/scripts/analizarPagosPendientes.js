const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

// Importar modelos
const Vivienda = require('../models/Vivienda');
const Residente = require('../models/Residente');
const Pago = require('../models/Pago');

// Conectar a la base de datos
const conectarDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    process.exit(1);
  }
};

// Funci√≥n para analizar pagos pendientes
const analizarPagosPendientes = async () => {
  try {
    console.log('\nüîç AN√ÅLISIS DETALLADO DE PAGOS PENDIENTES\n');
    console.log('='.repeat(80));

    const fechaActual = new Date();
    const a√±oActual = fechaActual.getFullYear();
    const mesActual = fechaActual.getMonth() + 1;
    
    console.log(`üìÖ Fecha actual: ${mesActual}/${a√±oActual}`);
    console.log(`üìÖ Analizando √∫ltimos 12 meses desde: ${mesActual}/${a√±oActual} hacia atr√°s\n`);

    // Obtener todas las viviendas con residentes
    const viviendas = await Vivienda.find().populate('residentes');
    
    let viviendasConMorosos = 0;
    let totalPagosMorosos = 0;
    let detalleMorosos = [];

    for (const vivienda of viviendas) {
      if (vivienda.residentes.length > 0) {
        for (const residente of vivienda.residentes) {
          console.log(`\nüè† VIVIENDA ${vivienda.numero} - ${residente.nombre} ${residente.apellidos}`);
          
          // Buscar pagos del residente
          const pagos = await Pago.find({ 
            vivienda: vivienda._id,
            residente: residente._id 
          }).sort({ a√±o: -1, mes: -1 });

          console.log(`   üìÖ Total pagos registrados: ${pagos.length}`);
          
          // Mostrar √∫ltimos pagos registrados
          if (pagos.length > 0) {
            console.log(`   üí∞ √öltimos pagos registrados:`);
            pagos.slice(0, 5).forEach(pago => {
              const fechaPago = pago.fechaPago ? new Date(pago.fechaPago).toLocaleDateString() : 'Sin fecha';
              console.log(`      ${pago.mes}/${pago.a√±o} - $${pago.monto} - ${pago.estado} - ${fechaPago}`);
            });
            
            // Encontrar el √∫ltimo pago
            const ultimoPago = pagos[0];
            console.log(`   üìÖ √öLTIMO PAGO: ${ultimoPago.mes}/${ultimoPago.a√±o} - $${ultimoPago.monto} - ${ultimoPago.estado}`);
          } else {
            console.log(`   ‚ùå NO HAY PAGOS REGISTRADOS`);
          }
          
          let pagosMorosos = [];
          let pagosAtrasados = [];
          let mesesPendientes = [];

          // Verificar pagos de los √∫ltimos 12 meses
          for (let i = 0; i < 12; i++) {
            const a√±o = a√±oActual;
            const mes = mesActual - i;
            
            let a√±oBuscado, mesBuscado;
            
            if (mes <= 0) {
              a√±oBuscado = a√±o - 1;
              mesBuscado = mes + 12;
            } else {
              a√±oBuscado = a√±o;
              mesBuscado = mes;
            }
            
            const pago = pagos.find(p => p.a√±o === a√±oBuscado && p.mes === mesBuscado);
            
            if (!pago) {
              // No hay pago para este mes
              const mesesAtraso = i;
              const infoPago = {
                mes: mesBuscado,
                a√±o: a√±oBuscado,
                mesesAtraso: mesesAtraso,
                esMoroso: mesesAtraso >= 2,
                monto: 200 // Monto t√≠pico de mantenimiento
              };
              
              mesesPendientes.push(infoPago);
              pagosAtrasados.push(infoPago);
              
              if (mesesAtraso >= 2) {
                pagosMorosos.push(infoPago);
              }
            }
          }

          if (pagosMorosos.length > 0) {
            viviendasConMorosos++;
            totalPagosMorosos += pagosMorosos.length;
            
            detalleMorosos.push({
              vivienda: vivienda.numero,
              residente: `${residente.nombre} ${residente.apellidos}`,
              pagosMorosos: pagosMorosos.length,
              pagosAtrasados: pagosAtrasados.length,
              totalPendiente: mesesPendientes.length,
              detalle: pagosMorosos,
              ultimoPago: pagos.length > 0 ? `${pagos[0].mes}/${pagos[0].a√±o}` : 'Nunca'
            });
            
            console.log(`   üìä RESUMEN:`);
            console.log(`      üö® Pagos morosos (2+ meses): ${pagosMorosos.length}`);
            console.log(`      ‚ö†Ô∏è  Pagos atrasados: ${pagosAtrasados.length}`);
            console.log(`      üìÖ Total meses pendientes: ${mesesPendientes.length}`);
            console.log(`      üí∞ Total adeudado: $${mesesPendientes.length * 200}`);
            
            console.log(`   üìã MESES PENDIENTES:`);
            mesesPendientes.forEach(pago => {
              const tipo = pago.esMoroso ? 'üö® MOROSO' : '‚ö†Ô∏è  ATRASADO';
              console.log(`      ${tipo}: ${pago.mes}/${pago.a√±o} (${pago.mesesAtraso} meses de atraso) - $${pago.monto}`);
            });
          } else {
            console.log(`   ‚úÖ SIN MOROSIDAD`);
          }
        }
      }
    }

    // Resumen detallado
    console.log('\n' + '='.repeat(80));
    console.log('üìà RESUMEN DETALLADO:');
    console.log(`   üè† Total viviendas: ${viviendas.length}`);
    console.log(`   üö® Viviendas con morosos: ${viviendasConMorosos}`);
    console.log(`   üö® Total pagos morosos: ${totalPagosMorosos}`);
    console.log(`   üìä Porcentaje de morosidad: ${((viviendasConMorosos / viviendas.length) * 100).toFixed(2)}%`);

    // Tabla resumen por vivienda
    console.log('\n' + '='.repeat(80));
    console.log('üìã RESUMEN POR VIVIENDA:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ Vivienda    ‚îÇ Residente           ‚îÇ √öltimo Pago  ‚îÇ Pagos Morosos‚îÇ Total Pendiente‚îÇ Total Adeudado‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    detalleMorosos.forEach(item => {
      const vivienda = item.vivienda.toString().padEnd(11);
      const residente = item.residente.padEnd(19);
      const ultimoPago = item.ultimoPago.padEnd(12);
      const morosos = item.pagosMorosos.toString().padEnd(12);
      const pendientes = item.totalPendiente.toString().padEnd(14);
      const adeudado = `$${item.totalPendiente * 200}`.padEnd(14);
      
      console.log(`‚îÇ ${vivienda} ‚îÇ ${residente} ‚îÇ ${ultimoPago} ‚îÇ ${morosos} ‚îÇ ${pendientes} ‚îÇ ${adeudado} ‚îÇ`);
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    // Explicaci√≥n del c√°lculo
    console.log('\n' + '='.repeat(80));
    console.log('üîç EXPLICACI√ìN DEL C√ÅLCULO:');
    console.log('   ‚Ä¢ Se analizan los √∫ltimos 12 meses desde la fecha actual');
    console.log('   ‚Ä¢ Un pago se considera MOROSO si tiene 2+ meses de atraso');
    console.log('   ‚Ä¢ Un pago se considera ATRASADO si tiene menos de 2 meses de atraso');
    console.log('   ‚Ä¢ Cada mes sin pago cuenta como 1 pago pendiente');
    console.log(`   ‚Ä¢ Por eso: ${viviendasConMorosos} viviendas √ó m√∫ltiples meses = ${totalPagosMorosos} pagos morosos`);

    // Recomendaciones
    console.log('\n' + '='.repeat(80));
    console.log('üí° RECOMENDACIONES:');
    console.log('   1. Contactar a los residentes morosos para regularizar pagos');
    console.log('   2. Implementar sistema de recordatorios autom√°ticos');
    console.log('   3. Considerar descuentos por pago adelantado');
    console.log('   4. Revisar pol√≠ticas de recargos por morosidad');
    console.log('   5. Actualizar fechas de pagos (est√°n en 2025, deber√≠an estar en 2024)');

  } catch (error) {
    console.error('‚ùå Error en an√°lisis:', error);
  }
};

// Funci√≥n principal
const main = async () => {
  await conectarDB();
  await analizarPagosPendientes();
  
  console.log('\n‚úÖ An√°lisis de pagos pendientes completado');
  process.exit(0);
};

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { analizarPagosPendientes };
